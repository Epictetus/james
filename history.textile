h2. Version 0.2

* hanke: Rewrite of internals. Complex dialogs or injecting your own core (starting) dialog now possible.
* hanke: States now accessible from dialog through instance method. E.g. @state.welcome@ exists if a @state :welcome do ...@ has been defined.

h2. Version 0.1.1

* hanke: @james@ command line includes options @-s@ (silent input/output), @-si@ (silent input) and @-so@ (silent output). @-s@ is equal to @-si -so@.

h2. Version 0.1.0

* hanke: API breakage, @James.dialog@ -> @James.use_dialog@.
* hanke: Command line @james@ now takes file names (or patterns, like @james time_dialog.rb@ or @james {time,twitter}*.rb@)
* hanke: @James.listen@ can only be called once. So if you use @ruby@ to run a dialog, it needs to be called once at the end of the script.
* hanke: Added @James.use@. It takes any number of @James::Dialog@ instances to use when listening.

h2. Version 0.0.12

* hanke: @hear 'Stay in same state' => ->(){ "This block will now be instance eval'd in the context of the Dialog" }@

h2. Version 0.0.11

* hanke: Bugfix on missing state handling.

h2. Version 0.0.8 - 0.0.10

* hanke: Reordered dialog options such that the most important ones, currently, are on top.

h2. Version 0.0.7

* hanke: @hear@ method of state now also takes as target a @->(){}@ lambda to execute without going to another state like @'phrase' => :another_state@. It stays in the same state.

h2. Version 0.0.6

* hanke: Dialogs implemented.
* hanke: Dialogs are hooked up to a central control dialog.

h2. Version 0.0.1-0.0.5

* hanke: James steps out of the cave. Utters an "Ugh". Then, pees on a berry bush.